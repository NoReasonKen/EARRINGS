import os
import sys
import argparse

PWD = os.path.dirname(os.path.realpath(__file__))
PROFILE_PATH = os.path.join(PWD, "Profiles")
BASE_CALLING_PROFILES = os.path.join(PROFILE_PATH, "Base-Calling_Profiles", "humNew.PE100.matrix.gz")
INDEL_PROFILES = os.path.join(PROFILE_PATH, "InDel_Profiles", "phixv2.InDel.matrix")
GC_PROFILES = os.path.join(PROFILE_PATH, "GC-depth_Profiles", "humNew.gcdep_100.dat")
EXE = os.path.join(PWD, "pirs")

READ_LEN = 100
# default adapter
AD1 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCACCACCTAATCTCGTATGCCGTCTTCTGCTTG"
AD2 = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT"

'''
python3 script.py [seed] -r [ref_genome] -n [read_num] -m [insert_mean] -std [insert_td] -ad1 [ad1] -ad2 [ad1] -s [prefix] -O [output_dir]
To generate reads without adapters:
eg. python3 script.py 0 -r hg38_chr1.fa -n 10000 -m 150 -std 50 -ad1 "" -ad2 ""
To generate reads with default adapters:
eg. python3 script.py 0 -r hg38_chr1.fa -n 10000 -m 150 -std 50
'''

def parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("seed", help="Seed num", type=int)
    parser.add_argument("-r", help="Path to reference genome.", type=str)
    parser.add_argument("-n", help="# of reads generated by simulator", type=int, default=10000)
    parser.add_argument("-m", help="Mean of insert distribution", type=int, default=150)
    parser.add_argument("-std", help="Std of insert distribution", type=int, default=50)
    parser.add_argument("-ad1", help="First adapter", type=str, default=AD1)
    parser.add_argument("-ad2", help="Second adapter", type=str, default=AD2)
    parser.add_argument("-q", help="Quiet mode", type=bool, default=1)
    parser.add_argument("-t", help="Store the system output of pIRS.", type=bool, default=0)
    parser.add_argument("-a", help="Store mode: append", type=bool, default=0)
    parser.add_argument("-s", help="Output filename prefix", type=str, default=None)
    parser.add_argument("-O", help="Output directory", type=str, default=None)
    parser.add_argument("-o", help="File name of the system output of pIRS", type=str, default="simulator_output.txt")
    
    return parser.parse_args()

if __name__ == "__main__":
    args = parser()
    seed = args.seed
    ref = args.r
    readnum = args.n
    mean = args.m 
    std = args.std
    ad1 = args.ad1
    ad2 = args.ad2
    fname_prefix = args.s
    output_dir = args.O
    GC_PROFILES = os.path.join(PROFILE_PATH, "GC-depth_Profiles", "humNew.gcdep_{}.dat".format(mean))
    command = "{} simulate -x {} -l {} -m {} -v {} -B {} -I {} -G {} {} -Q 33 --random-seed={} -t 1".format(EXE, readnum, READ_LEN, mean, std, BASE_CALLING_PROFILES, INDEL_PROFILES, GC_PROFILES, ref, seed)
    
    if fname_prefix is not None:
        command += " -s {}".format(fname_prefix)
    
    if len(ad1) != 0 and len(ad2) != 0:
        command += " -1 {} -2 {}".format(ad1, ad2)
    if args.q:
        command += " -q"
    
    if args.O is not None:
        command += " -o {}".format(output_dir)
    if args.t:
        command += " | tee"
        if args.a:
            command += " -a"
        command += " {}".format(args.o)

    os.system(command)
